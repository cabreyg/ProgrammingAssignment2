q()
add2 <- function(x, y) {
x+y
}
add2(4,8)
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
columnMean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
boyss <- read.csv("hw1_data.csv")
columnMean(boyss)
columnMean <- function(y, removeNA = TRUE) { %%defaults to true
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnMean <- function(y, removeNA = TRUE) { %defaults to true%
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnMean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnMean(boyss)
columnMean(boyss, FALSE)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors)
lapply(flag_colors, sum())
lapply(flag_colors, colSums)
lapply(flag_colors, sum
lapply(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
class(sapply(flag_colors, sum))
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(falgs, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
cc <- sapply(unique_vals, length)
class(cc)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, length, elem[2])
d
d
e
lapply(unique_vals, function(elem), elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris.(head)
head(iris)
tapply(iris$Sepal.Length, Species$virginica, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21419-82.63636
debug(ls)
ls()
x <- [1 2, 3 4]
m <- matrix
m <- matrix(2,2)
m
m <- matrix(5,2,2)
m
solve(m)
m <- matrix(1:4,2,2)
m
solve(m)
dir()
dir()
change.wd(Github)
setwd("~/GitHub/ProgrammingAssignment2")
make.wd()dir()
dir()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:4)
makeVector(1)
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
print(x)
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
set <- function(y) {
x <<- y
m <<- NULL
}
print(x)
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
set <- function(y) {
x <<- y
m <<- NULL
}
print(x)
print(set)
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
set <- function(y) {
x <<- y
m <<- NULL
}
print(x)
print(set)
print("tigger")
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
set <- function(y) {
x <<- y
m <<- NULL
}
print(x)
print("tigger")
print(set)
print("tigger")
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(1:10)
cachemean(1:5)
cachemean(1:5)
x <- (1:10)
x
cachemean(x)
makeVector(x)
cachemean(x)
list(a = 1, b = 2)
cabbies <- makeVector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cabbies <- makeVector(1:10)
cabbies
tien <- cachemean(cabbies)
tien
boys <- function() x
boys(1)
boys()
boys
get <- function() x
x
data <- x$get()
get()
x
x$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
timmy <- makeVector(1:20)
timmy
data <- x$get()
get()
bob <- function(mean) x
bob
bob()
bob(mean)
setmean <- function(mean) m
setmean
setmean(x)
bob(x)
setmean
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
five <- makeVector(1:20)
a <- function(mean)
a <- function(mean) 1:10
a
a
(a)
a(1)
print(a(1))
mean
mean
set
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
(myvector = makeVector(1:6.5))
cachemean(myvector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
(data <- x$get())
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(myvector)
try2 <- makeVector(3:4)
cachemean(try2)
try3 <- makeVector(2:5)
cachemean(try3)
try4 <- makeVector(2:5)
cachemean(try4)
cachemean(try4)
cachemean(try3)
cachemean(try2)
cachemean(myvector)
try5 <- makeVector(1:5)
cachemean(myvector)
cachemean <- function(x, ...) {
m <- x$getmean()
print(m)
print("candybars")
if(!is.null(m)) {
message("getting cached data")
return(m)
}
(data <- x$get())
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(myvector)
t = numeric()
class(t)
eight = matrix()
class(eight)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(solve) i <<- solve
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(1:9,3,3)
g <- matrix(1:9)
g
g <- matrix(1:9,3)
g
makeCacheMatrix(1:9,3)
makeCacheMatrix(g)
tarballin <- makeCacheMatrix(g)
cacheSolve(tarballin)
cacheSolve <- function(x, ...) {
i <- x$getinv()
if(!is.null(i)) {
message("getting cached inverse")
return(i)
}
(data <- x$get())
i <- solve(data, ...)
x$setinv(i)
i
}
cacheSolve(tarballin)
g
solve(g)
potty <- matrix(rnorm(9,5,1),3)
potty
makeCacheMatrix(potty)
greenydenims <- makeCacheMatrix(potty)
cacheSolve(greenydenims)
cacheSolve(greenydenims)
tacobear <- matrix(rn(9,8,2),3)
tacobear <- matrix(rnorm(9,8,2),3)
sectry <- makeCacheMatrix(tacobear)
cacheSolve(sectry)
cacheSolve(greenydenims)
cacheSolve(sectry)
setwd("~/")
setwd("~/GitHub/ProgrammingAssignment2")
rm(list = ls())
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(solve) i <<- solve
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached inverse")
return(i)
}
(data <- x$get())
i <- solve(data, ...)
x$setinv(i)
i
}
mymat <- makeCacheMatrix(rnorm(9,5,1))
quer1 <- cacheSolve(mymat)
rnorm(9,5,1)
matrix(rnorm(9,5,1),3)
mymat <- makeCacheMatrix(matrix(rnorm(9,5,1),3))
quer1 <- cacheSolve(mymat)
quer1
quer1 <- cacheSolve(mymat)
cacheSolve(mymat)
